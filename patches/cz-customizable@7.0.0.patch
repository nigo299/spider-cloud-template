diff --git a/.cz-config.js b/.cz-config.js
index 64014b12d26d1b4aab59a9bcb0e61101272710a1..1bbeeb9a1976658bcd1674ee82a42b4f61af1666 100644
--- a/.cz-config.js
+++ b/.cz-config.js
@@ -32,6 +32,7 @@ module.exports = {
   isTicketNumberRequired: false,
   ticketNumberPrefix: 'TICKET-',
   ticketNumberRegExp: '\\d{1,5}',
+  isJiraNumberRequired: false,
 
   // it needs to match the value for field type. Eg.: 'fix'
   /*
diff --git a/index.js b/index.js
index 026b0394876a242854922784260dfd1206bba6b7..904a60fabbac9c831a383133326e8325f1dcb590 100755
--- a/index.js
+++ b/index.js
@@ -1,8 +1,3 @@
-#!/usr/bin/env node
-
-/* eslint-disable global-require */
-// Inspired by: https://github.com/commitizen/cz-conventional-changelog and https://github.com/commitizen/cz-cli
-
 const editor = require('editor');
 const temp = require('temp').track();
 const fs = require('fs');
@@ -19,30 +14,7 @@ module.exports = {
     const questions = require('./lib/questions').getQuestions(config, cz);
 
     cz.prompt(questions).then((answers) => {
-      if (answers.confirmCommit === 'edit') {
-        temp.open(null, (err, info) => {
-          /* istanbul ignore else */
-          if (!err) {
-            fs.writeSync(info.fd, buildCommit(answers, config));
-            fs.close(info.fd, () => {
-              editor(info.path, (code) => {
-                if (code === 0) {
-                  const commitStr = fs.readFileSync(info.path, {
-                    encoding: 'utf8',
-                  });
-                  commit(commitStr);
-                } else {
-                  log.info(`Editor returned non zero value. Commit message was:\n${buildCommit(answers, config)}`);
-                }
-              });
-            });
-          }
-        });
-      } else if (answers.confirmCommit === 'yes') {
-        commit(buildCommit(answers, config));
-      } else {
-        log.info('Commit has been canceled.');
-      }
+      commit(buildCommit(answers, config));
     });
   },
 };
diff --git a/lib/build-commit.js b/lib/build-commit.js
index 84650f496adc5377f9d4ca0543cf7221eb7c1da1..9322428e6c846b9f866af8fb96df7eaf204faa4b 100644
--- a/lib/build-commit.js
+++ b/lib/build-commit.js
@@ -5,6 +5,17 @@ const defaultSubjectSeparator = ': ';
 const defaultMaxLineWidth = 100;
 const defaultBreaklineChar = '|';
 
+const addJiraNumber = (jiraNumber, config) => {
+  if (!jiraNumber) {
+    return '';
+  }
+
+  if (config.jiraNumberPrefix) {
+    return `${config.jiraNumberPrefix + jiraNumber.trim()} `;
+  }
+
+  return `${jiraNumber.trim()} `;
+};
 const addTicketNumber = (ticketNumber, config) => {
   if (!ticketNumber) {
     return '';
@@ -73,6 +84,7 @@ module.exports = (answers, config) => {
   // Hard limit this line
   // eslint-disable-next-line max-len
   const head =
+    addJiraNumber(answers.jiraNumber, config) + // add
     addType(answers.type, config) +
     addScope(answers.scope, config) +
     addTicketNumber(answers.ticketNumber, config) +
diff --git a/lib/questions.js b/lib/questions.js
index 9275b1c53c8fc69d35d897f41f1cc3d70c69e868..b9626903275fa2547374571b6fb29a491a8d6970 100644
--- a/lib/questions.js
+++ b/lib/questions.js
@@ -1,48 +1,3 @@
-const _ = require('lodash');
-const buildCommit = require('./build-commit');
-const log = require('./logger');
-const getPreviousCommit = require('./utils/get-previous-commit');
-
-const isNotWip = (answers) => answers.type.toLowerCase() !== 'wip';
-
-const isValidateTicketNo = (value, config) => {
-  if (!value) {
-    return !config.isTicketNumberRequired;
-  }
-  if (!config.ticketNumberRegExp) {
-    return true;
-  }
-  const reg = new RegExp(config.ticketNumberRegExp);
-  if (value.replace(reg, '') !== '') {
-    return false;
-  }
-  return true;
-};
-
-const getPreparedCommit = (context) => {
-  let message = null;
-
-  let preparedCommit = getPreviousCommit();
-
-  if (preparedCommit) {
-    preparedCommit = preparedCommit
-      .replace(/^#.*/gm, '')
-      .replace(/^\s*[\r\n]/gm, '')
-      .replace(/[\r\n]$/, '')
-      .split(/\r\n|\r|\n/);
-
-    if (preparedCommit.length && preparedCommit[0]) {
-      if (context === 'subject') [message] = preparedCommit;
-      else if (context === 'body' && preparedCommit.length > 1) {
-        preparedCommit.shift();
-        message = preparedCommit.join('|');
-      }
-    }
-  }
-
-  return message;
-};
-
 module.exports = {
   getQuestions(config, cz) {
     // normalize config optional options
@@ -71,66 +26,34 @@ module.exports = {
     messages.confirmCommit = messages.confirmCommit || 'Are you sure you want to proceed with the commit above?';
 
     let questions = [
+      {
+        type: 'input',
+        name: 'jiraNumber',
+        message: messages.jiraNumber || 'Enter the JIRA issue number (optional):',
+        when: (answers) => config.isJiraNumberRequired !== false,
+        validate(value) {
+          if (!value && config.isJiraNumberRequired) {
+            return 'JIRA issue number is required';
+          }
+          if (value) {
+            const reg = new RegExp(/^[A-Z]+-\d+$/);
+            if (!reg.test(value)) {
+              return '格式不正确，正确格式为ABC-123';
+            }
+          }
+          return true;
+        }
+      },
       {
         type: 'list',
         name: 'type',
         message: messages.type,
         choices: config.types,
       },
-      {
-        type: 'list',
-        name: 'scope',
-        message: messages.scope,
-        choices(answers) {
-          let scopes = [];
-          if (scopeOverrides[answers.type]) {
-            scopes = scopes.concat(scopeOverrides[answers.type]);
-          } else {
-            scopes = scopes.concat(config.scopes);
-          }
-          if (config.allowCustomScopes || scopes.length === 0) {
-            scopes = scopes.concat([
-              new cz.Separator(),
-              { name: 'empty', value: false },
-              { name: 'custom', value: 'custom' },
-            ]);
-          }
-          return scopes;
-        },
-        when(answers) {
-          let hasScope = false;
-          if (scopeOverrides[answers.type]) {
-            hasScope = !!(scopeOverrides[answers.type].length > 0);
-          } else {
-            hasScope = !!(config.scopes && config.scopes.length > 0);
-          }
-          if (!hasScope) {
-            // TODO: Fix when possible
-            // eslint-disable-next-line no-param-reassign
-            answers.scope = skipEmptyScopes ? '' : 'custom';
-            return false;
-          }
-          return isNotWip(answers);
-        },
-      },
       {
         type: 'input',
         name: 'scope',
-        message: messages.customScope,
-        when(answers) {
-          return answers.scope === 'custom';
-        },
-      },
-      {
-        type: 'input',
-        name: 'ticketNumber',
-        message: messages.ticketNumber,
-        when() {
-          return !!config.allowTicketNumber; // no ticket numbers allowed unless specifed
-        },
-        validate(value) {
-          return isValidateTicketNo(value, config);
-        },
+        message: messages.scope,
       },
       {
         type: 'input',
@@ -142,6 +65,9 @@ module.exports = {
           if (value.length > limit) {
             return `Exceed limit: ${limit}`;
           }
+          if (!value) {
+            return 'Subject is required';
+          }
           return true;
         },
         filter(value) {
@@ -156,40 +82,18 @@ module.exports = {
         message: messages.body,
         default: config.usePreparedCommit && getPreparedCommit('body'),
       },
+      {
+        type: 'confirm',
+        name: 'isBreaking',
+        message: '是否有破坏性更新?(可skip)',
+        default: false,
+      },
       {
         type: 'input',
         name: 'breaking',
         message: messages.breaking,
         when(answers) {
-          // eslint-disable-next-line max-len
-          if (
-            config.askForBreakingChangeFirst ||
-            (config.allowBreakingChanges && config.allowBreakingChanges.indexOf(answers.type.toLowerCase()) >= 0)
-          ) {
-            return true;
-          }
-          return false; // no breaking changes allowed unless specifed
-        },
-      },
-      {
-        type: 'input',
-        name: 'footer',
-        message: messages.footer,
-        when: isNotWip,
-      },
-      {
-        type: 'expand',
-        name: 'confirmCommit',
-        choices: [
-          { key: 'y', name: 'Yes', value: 'yes' },
-          { key: 'n', name: 'Abort commit', value: 'no' },
-          { key: 'e', name: 'Edit message', value: 'edit' },
-        ],
-        default: 0,
-        message(answers) {
-          const SEP = '###--------------------------------------------------------###';
-          log.info(`\n${SEP}\n${buildCommit(answers, config)}\n${SEP}\n`);
-          return messages.confirmCommit;
+          return answers.isBreaking;
         },
       },
     ];