---
description: Spider Cloud Template 项目规范
globs: ["**/*.{vue,ts,tsx,js,jsx}"]
alwaysApply: false
---

# PC组件库使用指南

本文档介绍了 `packages/pc/src/components` 目录下可用的通用组件及其使用方法。在开发过程中，优先使用这些组件，其次再考虑使用 Ant Design Vue 组件。

## 项目架构

项目基于Vue 3 + TypeScript + Vite构建，使用了以下主要技术栈：

- Vue 3 Composition API
- TypeScript
- Ant Design Vue 作为UI组件库基础
- UnoCSS 进行原子化CSS开发
- Vue Router 进行路由管理
- Pinia 进行状态管理

### 文件结构

```
packages/pc/src/
├── api/              # API接口
├── assets/           # 静态资源
├── auto-import/      # 自动导入配置
├── components/       # 公共组件
├── config/           # 配置文件
├── directives/       # 自定义指令
├── enums/            # 枚举常量
├── hooks/            # 自定义Hooks
├── interface/        # TypeScript接口定义
├── layout/           # 布局组件
├── plugins/          # 插件
├── router/           # 路由配置
├── stores/           # Pinia状态管理
├── utils/            # 工具函数
├── views/            # 页面组件
```

## Table 表格组件

封装自 Ant Design Vue 的 Table 组件，用于统一表格风格，快速生成表格。

### 基本用法

```vue
<script setup lang="ts">
import type { TableColumnAllType, TableConfigType } from '@/interface/table'
import { TableColumnTypeEnum } from '@/enums'
import { ref } from 'vue'

// 表格数据
const tableData = ref([
  {
    id: '01',
    name: '示例数据',
    // 其他字段
  },
])

// 表格配置
const tableConfig = ref<TableConfigType>({
  rowKey: 'id',
  pagination: {
    current: 1,
    pageSize: 10,
    total: 60,
    defaultPageSize: 10,
    pageSizeOptions: ['10', '20', '50', '100'],
    showSizeChanger: true,
    showTotal: (total: number) => `共 ${total} 条`,
  },
})

// 表格列配置
const tableColumns: TableColumnAllType[] = [
  {
    title: '序号',
    key: 'id',
    dataIndex: 'id',
    width: 64,
    align: 'left',
    type: TableColumnTypeEnum.TEXT,
  },
  {
    title: '名称',
    dataIndex: 'name',
    key: 'name',
    width: 180,
    type: TableColumnTypeEnum.TEXT,
  },
  {
    title: '操作',
    key: 'operation',
    width: 128,
    align: 'center',
    type: TableColumnTypeEnum.OPERATION,
  },
]

// 选中行
const selectList = ref<string[]>([])

// 分页变化处理
function changePaginationEvent(pagination: any, filters: any, sorter: any) {
  if (pagination && tableConfig.value && tableConfig.value.pagination) {
    tableConfig.value.pagination.current = pagination.current
    tableConfig.value.pagination.pageSize = pagination.pageSize
    // 重新加载数据
  }
}
</script>

<template>
  <Table
    v-model:select-list="selectList"
    :config="tableConfig"
    :data="tableData"
    :loading="false"
    :columns="tableColumns"
    @change="changePaginationEvent"
  >
    <!-- 自定义操作列 -->
    <template #default="{ row }">
      <a-space size="small">
        <a class="text-primary">编辑</a>
        <a class="text-danger">删除</a>
      </a-space>
    </template>

    <!-- 自定义表格上方区域 -->
    <template #header>
      <a-button type="primary">新增</a-button>
    </template>
  </Table>
</template>
```

### 配置参数

- `data`: 数据源
- `columns`: 表格列配置，使用TableColumnAllType类型，必须包含type字段
- `config`: 表格配置项，使用TableConfigType类型
- `loading`: 表格加载状态
- `selectList`: 表格选择的行数据key数组

### 列类型定义

表格列支持以下类型（通过TableColumnTypeEnum枚举定义）：

- `TEXT`: 文本类型
- `NUMBER`: 数字类型
- `DATE`: 日期类型
- `TOOLTIP`: 带提示的文本
- `TAG`: 标签类型
- `INDEX`: 索引列
- `OPERATION`: 操作列


### 表格样式规范

- 表头默认居中对齐，设置 `align: 'center'`
- 表格内容根据数据类型选择对齐方式，一般文本居左，数字居右
- 操作列必须居中对齐
- 时间字段使用时间戳作为值
- 使用 useSWRV 进行数据获取

## Form 表单组件

封装自 Ant Design Vue 的 Form 组件，用于快速生成表单。

### 基本用法

```vue
<script setup lang="ts">
import { FormColumnTypeEnum } from '@/enums'
import { reactive, ref } from 'vue'

// 表单数据
const formData = reactive({
  name: '',
  type: undefined,
})

// 表单字段配置
const formColumns = ref([
  {
    label: '名称',
    field: 'name',
    type: FormColumnTypeEnum.INPUT,
    placeholder: '请输入',
  },
  {
    label: '类型',
    field: 'type',
    type: FormColumnTypeEnum.SELECT,
    placeholder: '请选择',
    options: [
      { label: '类型A', value: 'A' },
      { label: '类型B', value: 'B' },
    ],
  },
])

// 表单配置
const formConfig = {
  col: {
    xs: 24,
    sm: 12,
    md: 8,
    lg: 8,
    xl: 8,
  },
  labelCol: {
    style: {
      width: '80px',
    },
  },
}

const baseFormRef = ref(null)
</script>

<template>
  <Form ref="baseFormRef" v-model:data="formData" :columns="formColumns" :config="formConfig" />
</template>
```

### 配置参数

- `data`: 表单数据源
- `columns`: 表单字段配置
- `config`: 表单配置项

### 表单字段类型

表单支持以下字段类型（通过FormColumnTypeEnum枚举定义）：

- `INPUT`: 输入框
- `SELECT`: 下拉选择框
- `TEXTAREA`: 文本域
- `SWITCH`: 开关
- `RADIO`: 单选框
- `CHECKBOX`: 复选框
- `DATEPICKER`: 日期选择器
- `RANGEPICKER`: 日期范围选择器

## Modal 对话框组件

基于 Ant Design Vue 的 Modal 组件封装，支持自动销毁和插槽透传等功能。

### 基本用法

```vue
<script setup>
import { ref } from 'vue'

const visible = ref(false)
</script>

<template>
  <Modal v-model:visible="visible" title="标题">
    <p>对话框内容</p>
  </Modal>
</template>
```

### 主要参数

- `visible`: 控制对话框可见性
- `destroySelfOnClose`: 关闭时是否销毁组件

### 样式类名

- `header-center`: 标题居中显示
- `footer-center`: 底部按钮居中显示

## Card 卡片组件

基于 Ant Design Vue 的 Card 组件封装，提供统一的卡片样式。

### 基本用法

```vue
<template>
  <Card title="标题">
    <div>卡片内容</div>
  </Card>
</template>
```

### 主要参数

- `title`: 卡片标题
- `loading`: 加载状态

## Upload 上传组件

基于 Ant Design Vue 的 Upload 组件封装，支持图片上传、预览和自定义验证等功能。

### 基本用法

```vue
<script setup lang="ts">
import type { UploadFile } from 'ant-design-vue'
import { ref } from 'vue'

const fileList = ref<UploadFile[]>([])

function onError(error: unknown) {
  console.error('上传出错:', error)
}
</script>

<template>
  <Upload
    v-model:file-list="fileList"
    :max-size="5"
    :max-count="3"
    :multiple="true"
    @error="onError"
  >
    <a-button>点击上传</a-button>
  </Upload>
</template>
```

### 主要参数

- `maxSize`: 最大文件大小(MB)
- `maxCount`: 最大上传数量
- `allowedTypes`: 允许的文件类型
- `multiple`: 是否支持多选
- `fileList`: 文件列表

## Search 搜索组件

封装表单搜索区域，提供展开/收起、重置、查询等功能。

### 基本用法

```vue
<template>
  <Search
    :search-loading="loading"
    :reset-loading="resetLoading"
    :is-inline="true"
    :expand="true"
    @search="handleSearch"
    @reset="handleReset"
  >
    <!-- 搜索表单内容 -->
    <Form v-model:data="formData" :columns="formColumns" :config="formConfig" />
  </Search>
</template>
```

### 主要参数

- `searchLoading`: 查询按钮加载状态
- `resetLoading`: 重置按钮加载状态
- `isInline`: 是否内联显示
- `expand`: 是否展开

## Page 页面容器组件

提供统一的页面容器样式。

### 基本用法

```vue
<template>
  <Page>
    <!-- 页面内容 -->
    <div class="h-full flex flex-col gap-4">
      <!-- 页面内容 -->
    </div>
  </Page>
</template>
```

### 主要参数

- `bodyClassName`: 内容区域类名
- `className`: 容器类名

## 页面开发示例

下面是一个完整的页面开发示例，展示了如何使用以上组件组合成一个完整的页面：

```vue
<script setup lang="ts">
import type { TableColumnAllType, TableConfigType } from '@/interface/table'
import { FormColumnTypeEnum, TableColumnTypeEnum } from '@/enums'
import { reactive, ref } from 'vue'

// 表格数据
const tableData = ref([
  {
    id: '01',
    name: '示例数据',
    type: '类型A',
    remark: '备注信息',
    createTime: '2024.07.03',
  },
  // 更多数据...
])

// 表格配置
const tableConfig = ref<TableConfigType>({
  rowKey: 'id',
  pagination: {
    current: 1,
    pageSize: 10,
    total: 60,
    showSizeChanger: true,
    showTotal: (total) => `共 ${total} 条`,
  },
})

// 表格列配置
const tableColumns: TableColumnAllType[] = [
  {
    title: '序号',
    key: 'id',
    dataIndex: 'id',
    width: 64,
    align: 'center',
    type: TableColumnTypeEnum.TEXT,
  },
  {
    title: '名称',
    dataIndex: 'name',
    key: 'name',
    width: 180,
    align: 'center',
    type: TableColumnTypeEnum.TEXT,
  },
  {
    title: '类型',
    dataIndex: 'type',
    key: 'type',
    width: 120,
    align: 'center',
    type: TableColumnTypeEnum.TEXT,
  },
  {
    title: '备注',
    dataIndex: 'remark',
    key: 'remark',
    width: 200,
    align: 'center',
    type: TableColumnTypeEnum.TOOLTIP,
  },
  {
    title: '创建时间',
    dataIndex: 'createTime',
    key: 'createTime',
    width: 120,
    align: 'center',
    type: TableColumnTypeEnum.DATE,
  },
  {
    title: '操作',
    key: 'operation',
    width: 120,
    align: 'center',
    type: TableColumnTypeEnum.OPERATION,
  },
]

// 选中行
const selectList = ref<string[]>([])

// 表单数据
const formData = reactive({
  name: '',
  type: undefined,
})

// 表单配置
const formColumns = ref([
  {
    label: '名称',
    field: 'name',
    type: FormColumnTypeEnum.INPUT,
    placeholder: '请输入',
  },
  {
    label: '类型',
    field: 'type',
    type: FormColumnTypeEnum.SELECT,
    placeholder: '请选择',
    options: [
      { label: '全部', value: '' },
      { label: '类型A', value: 'A' },
      { label: '类型B', value: 'B' },
    ],
  },
])

// 表单布局配置
const formConfig = {
  col: {
    xs: 24,
    sm: 12,
    md: 8,
    lg: 8,
    xl: 8,
  },
  labelCol: {
    style: {
      width: '80px',
    },
  },
}

// 状态管理
const searchLoading = ref(false)
const resetLoading = ref(false)
const tableLoading = ref(false)

// 分页事件
function changePaginationEvent(pagination: any, filters: any, sorter: any) {
  if (pagination && tableConfig.value && tableConfig.value.pagination) {
    tableConfig.value.pagination.current = pagination.current
    tableConfig.value.pagination.pageSize = pagination.pageSize
    handleSearch()
  }
}

// 搜索事件
function handleSearch() {
  searchLoading.value = true
  tableLoading.value = true

  // 模拟API请求
  setTimeout(() => {
    searchLoading.value = false
    tableLoading.value = false
  }, 500)
}

// 重置事件
function handleReset() {
  resetLoading.value = true
  formData.name = ''
  formData.type = undefined

  // 重置后搜索
  setTimeout(() => {
    resetLoading.value = false
    handleSearch()
  }, 500)
}
</script>

<template>
  <Page>
    <div class="h-full flex flex-col gap-4">
      <!-- 标题 -->
      <div class="border-l-4 border-solid border-primary pl-2.5 font-medium text-lg">页面标题</div>

      <!-- 搜索区域 -->
      <Card class="mb-2">
        <Search
          :search-loading="searchLoading"
          :reset-loading="resetLoading"
          :is-inline="true"
          :expand="true"
          @search="handleSearch"
          @reset="handleReset"
        >
          <Form v-model:data="formData" :columns="formColumns" :config="formConfig" />
        </Search>
      </Card>

      <!-- 表格区域 -->
      <Card>
        <Table
          v-model:select-list="selectList"
          :config="tableConfig"
          :data="tableData"
          :loading="tableLoading"
          :columns="tableColumns"
          @change="changePaginationEvent"
        >
          <!-- 表格顶部操作区 -->
          <template #header>
            <div class="flex items-center justify-end space-x-4">
              <a-button type="primary">新增</a-button>
              <a-button>导出</a-button>
            </div>
          </template>

          <!-- 表格操作列 -->
          <template #default="{ row }">
            <a-space size="small">
              <a class="text-primary">编辑</a>
              <a class="text-danger">删除</a>
            </a-space>
          </template>
        </Table>
      </Card>
    </div>
  </Page>
</template>
```

## 其他组件

- `DynamicTooltip.vue`: 动态提示组件
- `deleteModal.vue`: 删除确认弹窗
- `secretKey.vue`: 密钥管理组件
- `errPage.vue`: 错误页面组件

## 编码规范

### Vue 规范

1. 使用 Composition API 的 `<script setup>` 语法
2. 使用 `ref` 和 `reactive` 声明响应式状态
3. 使用 `defineProps` 和 `defineEmits` 定义组件属性和事件

### TypeScript 规范

1. 为变量、函数参数和返回值添加适当的类型注解
2. 使用接口或类型别名定义复杂数据结构
3. 优先使用项目中已定义的类型和枚举

### CSS 规范

1. 优先使用UnoCSS提供的原子化类
2. 组件样式使用 `scoped` 或 `module` 防止样式污染
3. 复杂样式可以使用Less预处理器

## 使用建议

1. 开发新页面时，优先使用这些公共组件，定义存在于packages/pc/auto-import中
2. 对于表格和表单，建议将配置提取到单独的配置文件中
3. 如果现有组件无法满足需求，再考虑使用 Ant Design Vue 原生组件
4. 需要扩展组件功能时，请保持与原有设计风格一致

## API 接口对接规范

本章节介绍项目中 API 接口对接的最佳实践和规范，包括接口组织、数据获取、错误处理等方面。

### 接口文件组织

1. **目录结构**

   - 所有 API 请求方法应放置在 `packages/pc/src/api/` 目录下
   - 按照业务模块进行分类，例如 `system/menuManage.ts`
   - 每个模块的接口应当在同一个文件中定义

2. **接口命名规范**

   - 获取列表：`get{Module}List`
   - 获取详情：`get{Module}Detail`
   - 新增：`add{Module}`
   - 更新：`update{Module}`
   - 删除：`delete{Module}`

3. **接口类型定义**
   - 接口参数和返回值类型定义应放在 `packages/pc/src/interface/` 目录下
   - 按照业务模块进行分类，文件命名与 API 文件对应
   - 接口类型命名以 `I` 开头，如 `IMenuTreeRecord`

### 使用 useSWRV 进行数据获取

项目中统一使用 useSWRV 进行数据获取和缓存管理，以提高用户体验和性能。

#### 基本用法

```typescript
import { NotRevalidateOption } from '@web/common/swrv'
import { to } from '@web/common/util'
import { message } from 'ant-design-vue'
import useSWRV from 'swrv'

// 定义数据获取方法
async function initData() {
  const [data, error] = await to(getMenuList())

  if (error) {
    message.error(error.message)
    return
  }

  // 数据处理逻辑
  function formatMenu(list) {
    list.forEach((item) => {
      item.children = item.items
      const { sortNumber, permissionType, code, path } = item.self
      Object.assign(item, { sortNumber, permissionType, code, path })

      if (item.hasChildren) formatMenu(item.items)
    })
  }
  formatMenu(data)

  return data
}

// 使用 useSWRV 获取数据
const {
  data: dataSource, // 数据源
  isValidating: loading, // 加载状态
  mutate: getList, // 手动触发重新获取数据的方法
} = useSWRV(() => '[menu-list]', initData, NotRevalidateOption)
```

#### 最佳实践

1. **唯一键**

   - 为每个请求提供唯一的键，推荐格式：`[{模块名}-{操作}]`
   - 例如：`[menu-list]`, `[user-detail-123]`

2. **错误处理**

   - 使用 `@web/common/util` 中的 `to` 函数进行异步错误处理
   - 在数据获取方法中处理错误，避免直接在组件中处理

3. **缓存控制**

   - 使用 `NotRevalidateOption` 可以避免组件重新挂载时自动重新获取数据
   - 需要更新数据时，通过 `mutate` 方法手动触发

4. **数据预处理**

   - 在数据获取方法内对 API 返回的数据进行处理和转换
   - 确保组件获取到的数据格式符合预期，例如转换树形结构

5. **加载状态**
   - 使用 `isValidating` 管理加载状态，控制表格或其他组件的加载动画

### 数据修改操作规范

对于修改操作（如新增、编辑、删除），应当遵循以下规范：

```typescript
// 删除操作示例
async function toDelete(id: string) {
  const [, err] = await to(deleteMenu(id))

  if (!err) {
    message.success('删除成功！')
    getList() // 刷新列表数据
  } else {
    message.error(err.message)
  }
}

// 新增/编辑操作示例
async function handleSubmit(formData) {
  const [, err] = await to(isEdit.value ? updateMenu(formData) : addMenu(formData))

  if (!err) {
    message.success(`${isEdit.value ? '编辑' : '新增'}成功！`)
    emit('refresh') // 通知父组件刷新数据
    visible.value = false
  } else {
    message.error(err.message)
  }
}
```

### 接口错误处理

1. **统一的错误处理方式**

   - 使用 `to` 函数解构API调用结果，获取数据和错误
   - 错误信息统一通过 `message.error` 展示给用户

2. **请求状态管理**
   - 使用 `ref` 管理加载状态
   - 操作开始前设置为 `true`，完成后设置为 `false`

### 模块间通信

当需要在不同组件间传递数据更新时，应采用以下方法：

1. **父子组件通信**

   - 子组件通过自定义事件通知父组件

   ```typescript
   const emit = defineEmits(['refresh'])
   emit('refresh') // 通知父组件
   ```

2. **全局状态管理**
   - 复杂应用应使用Pinia进行全局状态管理
   - 定义store并在组件中使用 `useStore` 获取和更新状态

### 配置文件分离

为了保持代码整洁，应将表格和表单配置提取到单独的文件中：

```typescript
// config/tableConfig.ts
export const tableColumns = [
  // 列配置
]

export const tableConfig = {
  // 表格配置
}

// config/formConfig.ts
export const formColumns = ref([
  // 表单字段配置
])
```

然后在组件中导入使用：

```typescript
import { formColumns } from './config/editFormConfig'
import { tableColumns, tableConfig } from './config/tableConfig'
```

### 接口调试和Mock数据

在开发阶段，可以使用Mock数据进行接口调试：

1. **本地Mock**

   - 在接口方法中添加Mock数据返回

   ```typescript
   export async function getMenuList() {
     // 开发环境返回Mock数据
     if (import.meta.env.DEV) {
       return Promise.resolve(mockData)
     }

     // 生产环境调用真实接口
     return request.get('/api/menu/list')
   }
   ```

2. **统一Mock服务**
   - 使用项目提供的Mock服务进行接口模拟
   - 在 `mock/` 目录下添加对应模块的Mock配置

# PC组件库使用指南

本文档介绍了 `packages/pc/src/components` 目录下可用的通用组件及其使用方法。在开发过程中，优先使用这些组件，其次再考虑使用 Ant Design Vue 组件。

## 项目架构

项目基于Vue 3 + TypeScript + Vite构建，使用了以下主要技术栈：

- Vue 3 Composition API
- TypeScript
- Ant Design Vue 作为UI组件库基础
- UnoCSS 进行原子化CSS开发
- Vue Router 进行路由管理
- Pinia 进行状态管理

### 文件结构

```
packages/pc/src/
├── api/              # API接口
├── assets/           # 静态资源
├── auto-import/      # 自动导入配置
├── components/       # 公共组件
├── config/           # 配置文件
├── directives/       # 自定义指令
├── enums/            # 枚举常量
├── hooks/            # 自定义Hooks
├── interface/        # TypeScript接口定义
├── layout/           # 布局组件
├── plugins/          # 插件
├── router/           # 路由配置
├── stores/           # Pinia状态管理
├── utils/            # 工具函数
├── views/            # 页面组件
```

## Table 表格组件

封装自 Ant Design Vue 的 Table 组件，用于统一表格风格，快速生成表格。

### 基本用法

```vue
<script setup lang="ts">
import type { TableColumnAllType, TableConfigType } from '@/interface/table'
import { TableColumnTypeEnum } from '@/enums'
import { ref } from 'vue'

// 表格数据
const tableData = ref([
  {
    id: '01',
    name: '示例数据',
    // 其他字段
  },
])

// 表格配置
const tableConfig = ref<TableConfigType>({
  rowKey: 'id',
  pagination: {
    current: 1,
    pageSize: 10,
    total: 60,
    defaultPageSize: 10,
    pageSizeOptions: ['10', '20', '50', '100'],
    showSizeChanger: true,
    showTotal: (total: number) => `共 ${total} 条`,
  },
})

// 表格列配置
const tableColumns: TableColumnAllType[] = [
  {
    title: '序号',
    key: 'id',
    dataIndex: 'id',
    width: 64,
    align: 'left',
    type: TableColumnTypeEnum.TEXT,
  },
  {
    title: '名称',
    dataIndex: 'name',
    key: 'name',
    width: 180,
    type: TableColumnTypeEnum.TEXT,
  },
  {
    title: '操作',
    key: 'operation',
    width: 128,
    align: 'center',
    type: TableColumnTypeEnum.OPERATION,
  },
]

// 选中行
const selectList = ref<string[]>([])

// 分页变化处理
function changePaginationEvent(pagination: any, filters: any, sorter: any) {
  if (pagination && tableConfig.value && tableConfig.value.pagination) {
    tableConfig.value.pagination.current = pagination.current
    tableConfig.value.pagination.pageSize = pagination.pageSize
    // 重新加载数据
  }
}
</script>

<template>
  <Table
    v-model:select-list="selectList"
    :config="tableConfig"
    :data="tableData"
    :loading="false"
    :columns="tableColumns"
    @change="changePaginationEvent"
  >
    <!-- 自定义操作列 -->
    <template #default="{ row }">
      <a-space size="small">
        <a class="text-primary">编辑</a>
        <a class="text-danger">删除</a>
      </a-space>
    </template>

    <!-- 自定义表格上方区域 -->
    <template #header>
      <a-button type="primary">新增</a-button>
    </template>
  </Table>
</template>
```

### 配置参数

- `data`: 数据源
- `columns`: 表格列配置，使用TableColumnAllType类型，必须包含type字段
- `config`: 表格配置项，使用TableConfigType类型
- `loading`: 表格加载状态
- `selectList`: 表格选择的行数据key数组

### 列类型定义

表格列支持以下类型（通过TableColumnTypeEnum枚举定义）：

- `TEXT`: 文本类型
- `NUMBER`: 数字类型
- `DATE`: 日期类型
- `TOOLTIP`: 带提示的文本
- `TAG`: 标签类型
- `INDEX`: 索引列
- `OPERATION`: 操作列


### 表格样式规范

- 表头默认居中对齐，设置 `align: 'center'`
- 表格内容根据数据类型选择对齐方式，一般文本居左，数字居右
- 操作列必须居中对齐
- 时间字段使用时间戳作为值
- 使用 useSWRV 进行数据获取

## Form 表单组件

封装自 Ant Design Vue 的 Form 组件，用于快速生成表单。

### 基本用法

```vue
<script setup lang="ts">
import { FormColumnTypeEnum } from '@/enums'
import { reactive, ref } from 'vue'

// 表单数据
const formData = reactive({
  name: '',
  type: undefined,
})

// 表单字段配置
const formColumns = ref([
  {
    label: '名称',
    field: 'name',
    type: FormColumnTypeEnum.INPUT,
    placeholder: '请输入',
  },
  {
    label: '类型',
    field: 'type',
    type: FormColumnTypeEnum.SELECT,
    placeholder: '请选择',
    options: [
      { label: '类型A', value: 'A' },
      { label: '类型B', value: 'B' },
    ],
  },
])

// 表单配置
const formConfig = {
  col: {
    xs: 24,
    sm: 12,
    md: 8,
    lg: 8,
    xl: 8,
  },
  labelCol: {
    style: {
      width: '80px',
    },
  },
}

const baseFormRef = ref(null)
</script>

<template>
  <Form ref="baseFormRef" v-model:data="formData" :columns="formColumns" :config="formConfig" />
</template>
```

### 配置参数

- `data`: 表单数据源
- `columns`: 表单字段配置
- `config`: 表单配置项

### 表单字段类型

表单支持以下字段类型（通过FormColumnTypeEnum枚举定义）：

- `INPUT`: 输入框
- `SELECT`: 下拉选择框
- `TEXTAREA`: 文本域
- `SWITCH`: 开关
- `RADIO`: 单选框
- `CHECKBOX`: 复选框
- `DATEPICKER`: 日期选择器
- `RANGEPICKER`: 日期范围选择器

## Modal 对话框组件

基于 Ant Design Vue 的 Modal 组件封装，支持自动销毁和插槽透传等功能。

### 基本用法

```vue
<script setup>
import { ref } from 'vue'

const visible = ref(false)
</script>

<template>
  <Modal v-model:visible="visible" title="标题">
    <p>对话框内容</p>
  </Modal>
</template>
```

### 主要参数

- `visible`: 控制对话框可见性
- `destroySelfOnClose`: 关闭时是否销毁组件

### 样式类名

- `header-center`: 标题居中显示
- `footer-center`: 底部按钮居中显示

## Card 卡片组件

基于 Ant Design Vue 的 Card 组件封装，提供统一的卡片样式。

### 基本用法

```vue
<template>
  <Card title="标题">
    <div>卡片内容</div>
  </Card>
</template>
```

### 主要参数

- `title`: 卡片标题
- `loading`: 加载状态

## Upload 上传组件

基于 Ant Design Vue 的 Upload 组件封装，支持图片上传、预览和自定义验证等功能。

### 基本用法

```vue
<script setup lang="ts">
import type { UploadFile } from 'ant-design-vue'
import { ref } from 'vue'

const fileList = ref<UploadFile[]>([])

function onError(error: unknown) {
  console.error('上传出错:', error)
}
</script>

<template>
  <Upload
    v-model:file-list="fileList"
    :max-size="5"
    :max-count="3"
    :multiple="true"
    @error="onError"
  >
    <a-button>点击上传</a-button>
  </Upload>
</template>
```

### 主要参数

- `maxSize`: 最大文件大小(MB)
- `maxCount`: 最大上传数量
- `allowedTypes`: 允许的文件类型
- `multiple`: 是否支持多选
- `fileList`: 文件列表

## Search 搜索组件

封装表单搜索区域，提供展开/收起、重置、查询等功能。

### 基本用法

```vue
<template>
  <Search
    :search-loading="loading"
    :reset-loading="resetLoading"
    :is-inline="true"
    :expand="true"
    @search="handleSearch"
    @reset="handleReset"
  >
    <!-- 搜索表单内容 -->
    <Form v-model:data="formData" :columns="formColumns" :config="formConfig" />
  </Search>
</template>
```

### 主要参数

- `searchLoading`: 查询按钮加载状态
- `resetLoading`: 重置按钮加载状态
- `isInline`: 是否内联显示
- `expand`: 是否展开

## Page 页面容器组件

提供统一的页面容器样式。

### 基本用法

```vue
<template>
  <Page>
    <!-- 页面内容 -->
    <div class="h-full flex flex-col gap-4">
      <!-- 页面内容 -->
    </div>
  </Page>
</template>
```

### 主要参数

- `bodyClassName`: 内容区域类名
- `className`: 容器类名

## 页面开发示例

下面是一个完整的页面开发示例，展示了如何使用以上组件组合成一个完整的页面：

```vue
<script setup lang="ts">
import type { TableColumnAllType, TableConfigType } from '@/interface/table'
import { FormColumnTypeEnum, TableColumnTypeEnum } from '@/enums'
import { reactive, ref } from 'vue'

// 表格数据
const tableData = ref([
  {
    id: '01',
    name: '示例数据',
    type: '类型A',
    remark: '备注信息',
    createTime: '2024.07.03',
  },
  // 更多数据...
])

// 表格配置
const tableConfig = ref<TableConfigType>({
  rowKey: 'id',
  pagination: {
    current: 1,
    pageSize: 10,
    total: 60,
    showSizeChanger: true,
    showTotal: (total) => `共 ${total} 条`,
  },
})

// 表格列配置
const tableColumns: TableColumnAllType[] = [
  {
    title: '序号',
    key: 'id',
    dataIndex: 'id',
    width: 64,
    align: 'center',
    type: TableColumnTypeEnum.TEXT,
  },
  {
    title: '名称',
    dataIndex: 'name',
    key: 'name',
    width: 180,
    align: 'center',
    type: TableColumnTypeEnum.TEXT,
  },
  {
    title: '类型',
    dataIndex: 'type',
    key: 'type',
    width: 120,
    align: 'center',
    type: TableColumnTypeEnum.TEXT,
  },
  {
    title: '备注',
    dataIndex: 'remark',
    key: 'remark',
    width: 200,
    align: 'center',
    type: TableColumnTypeEnum.TOOLTIP,
  },
  {
    title: '创建时间',
    dataIndex: 'createTime',
    key: 'createTime',
    width: 120,
    align: 'center',
    type: TableColumnTypeEnum.DATE,
  },
  {
    title: '操作',
    key: 'operation',
    width: 120,
    align: 'center',
    type: TableColumnTypeEnum.OPERATION,
  },
]

// 选中行
const selectList = ref<string[]>([])

// 表单数据
const formData = reactive({
  name: '',
  type: undefined,
})

// 表单配置
const formColumns = ref([
  {
    label: '名称',
    field: 'name',
    type: FormColumnTypeEnum.INPUT,
    placeholder: '请输入',
  },
  {
    label: '类型',
    field: 'type',
    type: FormColumnTypeEnum.SELECT,
    placeholder: '请选择',
    options: [
      { label: '全部', value: '' },
      { label: '类型A', value: 'A' },
      { label: '类型B', value: 'B' },
    ],
  },
])

// 表单布局配置
const formConfig = {
  col: {
    xs: 24,
    sm: 12,
    md: 8,
    lg: 8,
    xl: 8,
  },
  labelCol: {
    style: {
      width: '80px',
    },
  },
}

// 状态管理
const searchLoading = ref(false)
const resetLoading = ref(false)
const tableLoading = ref(false)

// 分页事件
function changePaginationEvent(pagination: any, filters: any, sorter: any) {
  if (pagination && tableConfig.value && tableConfig.value.pagination) {
    tableConfig.value.pagination.current = pagination.current
    tableConfig.value.pagination.pageSize = pagination.pageSize
    handleSearch()
  }
}

// 搜索事件
function handleSearch() {
  searchLoading.value = true
  tableLoading.value = true

  // 模拟API请求
  setTimeout(() => {
    searchLoading.value = false
    tableLoading.value = false
  }, 500)
}

// 重置事件
function handleReset() {
  resetLoading.value = true
  formData.name = ''
  formData.type = undefined

  // 重置后搜索
  setTimeout(() => {
    resetLoading.value = false
    handleSearch()
  }, 500)
}
</script>

<template>
  <Page>
    <div class="h-full flex flex-col gap-4">
      <!-- 标题 -->
      <div class="border-l-4 border-solid border-primary pl-2.5 font-medium text-lg">页面标题</div>

      <!-- 搜索区域 -->
      <Card class="mb-2">
        <Search
          :search-loading="searchLoading"
          :reset-loading="resetLoading"
          :is-inline="true"
          :expand="true"
          @search="handleSearch"
          @reset="handleReset"
        >
          <Form v-model:data="formData" :columns="formColumns" :config="formConfig" />
        </Search>
      </Card>

      <!-- 表格区域 -->
      <Card>
        <Table
          v-model:select-list="selectList"
          :config="tableConfig"
          :data="tableData"
          :loading="tableLoading"
          :columns="tableColumns"
          @change="changePaginationEvent"
        >
          <!-- 表格顶部操作区 -->
          <template #header>
            <div class="flex items-center justify-end space-x-4">
              <a-button type="primary">新增</a-button>
              <a-button>导出</a-button>
            </div>
          </template>

          <!-- 表格操作列 -->
          <template #default="{ row }">
            <a-space size="small">
              <a class="text-primary">编辑</a>
              <a class="text-danger">删除</a>
            </a-space>
          </template>
        </Table>
      </Card>
    </div>
  </Page>
</template>
```

## 其他组件

- `DynamicTooltip.vue`: 动态提示组件
- `deleteModal.vue`: 删除确认弹窗
- `secretKey.vue`: 密钥管理组件
- `errPage.vue`: 错误页面组件

## 编码规范

### Vue 规范

1. 使用 Composition API 的 `<script setup>` 语法
2. 使用 `ref` 和 `reactive` 声明响应式状态
3. 使用 `defineProps` 和 `defineEmits` 定义组件属性和事件

### TypeScript 规范

1. 为变量、函数参数和返回值添加适当的类型注解
2. 使用接口或类型别名定义复杂数据结构
3. 优先使用项目中已定义的类型和枚举

### CSS 规范

1. 优先使用UnoCSS提供的原子化类
2. 组件样式使用 `scoped` 或 `module` 防止样式污染
3. 复杂样式可以使用Less预处理器

## 使用建议

1. 开发新页面时，优先使用这些公共组件，定义存在于packages/pc/auto-import中
2. 对于表格和表单，建议将配置提取到单独的配置文件中
3. 如果现有组件无法满足需求，再考虑使用 Ant Design Vue 原生组件
4. 需要扩展组件功能时，请保持与原有设计风格一致

## API 接口对接规范

本章节介绍项目中 API 接口对接的最佳实践和规范，包括接口组织、数据获取、错误处理等方面。

### 接口文件组织

1. **目录结构**

   - 所有 API 请求方法应放置在 `packages/pc/src/api/` 目录下
   - 按照业务模块进行分类，例如 `system/menuManage.ts`
   - 每个模块的接口应当在同一个文件中定义

2. **接口命名规范**

   - 获取列表：`get{Module}List`
   - 获取详情：`get{Module}Detail`
   - 新增：`add{Module}`
   - 更新：`update{Module}`
   - 删除：`delete{Module}`

3. **接口类型定义**
   - 接口参数和返回值类型定义应放在 `packages/pc/src/interface/` 目录下
   - 按照业务模块进行分类，文件命名与 API 文件对应
   - 接口类型命名以 `I` 开头，如 `IMenuTreeRecord`

### 使用 useSWRV 进行数据获取

项目中统一使用 useSWRV 进行数据获取和缓存管理，以提高用户体验和性能。

#### 基本用法

```typescript
import { NotRevalidateOption } from '@web/common/swrv'
import { to } from '@web/common/util'
import { message } from 'ant-design-vue'
import useSWRV from 'swrv'

// 定义数据获取方法
async function initData() {
  const [data, error] = await to(getMenuList())

  if (error) {
    message.error(error.message)
    return
  }

  // 数据处理逻辑
  function formatMenu(list) {
    list.forEach((item) => {
      item.children = item.items
      const { sortNumber, permissionType, code, path } = item.self
      Object.assign(item, { sortNumber, permissionType, code, path })

      if (item.hasChildren) formatMenu(item.items)
    })
  }
  formatMenu(data)

  return data
}

// 使用 useSWRV 获取数据
const {
  data: dataSource, // 数据源
  isValidating: loading, // 加载状态
  mutate: getList, // 手动触发重新获取数据的方法
} = useSWRV(() => '[menu-list]', initData, NotRevalidateOption)
```

#### 最佳实践

1. **唯一键**

   - 为每个请求提供唯一的键，推荐格式：`[{模块名}-{操作}]`
   - 例如：`[menu-list]`, `[user-detail-123]`

2. **错误处理**

   - 使用 `@web/common/util` 中的 `to` 函数进行异步错误处理
   - 在数据获取方法中处理错误，避免直接在组件中处理

3. **缓存控制**

   - 使用 `NotRevalidateOption` 可以避免组件重新挂载时自动重新获取数据
   - 需要更新数据时，通过 `mutate` 方法手动触发

4. **数据预处理**

   - 在数据获取方法内对 API 返回的数据进行处理和转换
   - 确保组件获取到的数据格式符合预期，例如转换树形结构

5. **加载状态**
   - 使用 `isValidating` 管理加载状态，控制表格或其他组件的加载动画

### 数据修改操作规范

对于修改操作（如新增、编辑、删除），应当遵循以下规范：

```typescript
// 删除操作示例
async function toDelete(id: string) {
  const [, err] = await to(deleteMenu(id))

  if (!err) {
    message.success('删除成功！')
    getList() // 刷新列表数据
  } else {
    message.error(err.message)
  }
}

// 新增/编辑操作示例
async function handleSubmit(formData) {
  const [, err] = await to(isEdit.value ? updateMenu(formData) : addMenu(formData))

  if (!err) {
    message.success(`${isEdit.value ? '编辑' : '新增'}成功！`)
    emit('refresh') // 通知父组件刷新数据
    visible.value = false
  } else {
    message.error(err.message)
  }
}
```

### 接口错误处理

1. **统一的错误处理方式**

   - 使用 `to` 函数解构API调用结果，获取数据和错误
   - 错误信息统一通过 `message.error` 展示给用户

2. **请求状态管理**
   - 使用 `ref` 管理加载状态
   - 操作开始前设置为 `true`，完成后设置为 `false`

### 模块间通信

当需要在不同组件间传递数据更新时，应采用以下方法：

1. **父子组件通信**

   - 子组件通过自定义事件通知父组件

   ```typescript
   const emit = defineEmits(['refresh'])
   emit('refresh') // 通知父组件
   ```

2. **全局状态管理**
   - 复杂应用应使用Pinia进行全局状态管理
   - 定义store并在组件中使用 `useStore` 获取和更新状态

### 配置文件分离

为了保持代码整洁，应将表格和表单配置提取到单独的文件中：

```typescript
// config/tableConfig.ts
export const tableColumns = [
  // 列配置
]

export const tableConfig = {
  // 表格配置
}

// config/formConfig.ts
export const formColumns = ref([
  // 表单字段配置
])
```

然后在组件中导入使用：

```typescript
import { formColumns } from './config/editFormConfig'
import { tableColumns, tableConfig } from './config/tableConfig'
```

### 接口调试和Mock数据

在开发阶段，可以使用Mock数据进行接口调试：

1. **本地Mock**

   - 在接口方法中添加Mock数据返回

   ```typescript
   export async function getMenuList() {
     // 开发环境返回Mock数据
     if (import.meta.env.DEV) {
       return Promise.resolve(mockData)
     }

     // 生产环境调用真实接口
     return request.get('/api/menu/list')
   }
   ```

2. **统一Mock服务**
   - 使用项目提供的Mock服务进行接口模拟
   - 在 `mock/` 目录下添加对应模块的Mock配置
