---
description:
globs:
alwaysApply: false
---
# 页面开发示例

本文档提供一个完整的页面开发示例，展示了如何使用组件库组合成一个完整的页面。

## 完整页面示例

```vue
<script setup lang="ts">
import type { TableColumnAllType, TableConfigType } from '@/interface/table'
import { FormColumnTypeEnum, TableColumnTypeEnum } from '@/enums'
import { reactive, ref } from 'vue'

// 表格数据
const tableData = ref([
  {
    id: '01',
    name: '示例数据',
    type: '类型A',
    remark: '备注信息',
    createTime: '2024.07.03',
  },
  // 更多数据...
])

// 表格配置
const tableConfig = ref<TableConfigType>({
  rowKey: 'id',
  pagination: {
    current: 1,
    pageSize: 10,
    total: 60,
    showSizeChanger: true,
    showTotal: (total) => `共 ${total} 条`,
  },
})

// 表格列配置
const tableColumns: TableColumnAllType[] = [
  {
    title: '序号',
    key: 'id',
    dataIndex: 'id',
    width: 64,
    align: 'center',
    type: TableColumnTypeEnum.TEXT,
  },
  {
    title: '名称',
    dataIndex: 'name',
    key: 'name',
    width: 180,
    align: 'center',
    type: TableColumnTypeEnum.TEXT,
  },
  {
    title: '类型',
    dataIndex: 'type',
    key: 'type',
    width: 120,
    align: 'center',
    type: TableColumnTypeEnum.TEXT,
  },
  {
    title: '备注',
    dataIndex: 'remark',
    key: 'remark',
    width: 200,
    align: 'center',
    type: TableColumnTypeEnum.TOOLTIP,
  },
  {
    title: '创建时间',
    dataIndex: 'createTime',
    key: 'createTime',
    width: 120,
    align: 'center',
    type: TableColumnTypeEnum.DATE,
  },
  {
    title: '操作',
    key: 'operation',
    width: 120,
    align: 'center',
    type: TableColumnTypeEnum.OPERATION,
  },
]

// 选中行
const selectList = ref<string[]>([])

// 表单数据
const formData = reactive({
  name: '',
  type: undefined,
})

// 表单配置
const formColumns = ref([
  {
    label: '名称',
    field: 'name',
    type: FormColumnTypeEnum.INPUT,
    placeholder: '请输入',
  },
  {
    label: '类型',
    field: 'type',
    type: FormColumnTypeEnum.SELECT,
    placeholder: '请选择',
    options: [
      { label: '全部', value: '' },
      { label: '类型A', value: 'A' },
      { label: '类型B', value: 'B' },
    ],
  },
])

// 表单布局配置
const formConfig = {
  col: {
    xs: 24,
    sm: 12,
    md: 8,
    lg: 8,
    xl: 8,
  },
  labelCol: {
    style: {
      width: '80px',
    },
  },
}

// 状态管理
const searchLoading = ref(false)
const resetLoading = ref(false)
const tableLoading = ref(false)

// 分页事件
function changePaginationEvent(pagination: any, filters: any, sorter: any) {
  if (pagination && tableConfig.value && tableConfig.value.pagination) {
    tableConfig.value.pagination.current = pagination.current
    tableConfig.value.pagination.pageSize = pagination.pageSize
    handleSearch()
  }
}

// 搜索事件
function handleSearch() {
  searchLoading.value = true
  tableLoading.value = true

  // 模拟API请求
  setTimeout(() => {
    searchLoading.value = false
    tableLoading.value = false
  }, 500)
}

// 重置事件
function handleReset() {
  resetLoading.value = true
  formData.name = ''
  formData.type = undefined

  // 重置后搜索
  setTimeout(() => {
    resetLoading.value = false
    handleSearch()
  }, 500)
}
</script>

<template>
  <Page>
    <div class="h-full flex flex-col gap-4">
      <!-- 标题 -->
      <div class="border-l-4 border-solid border-primary pl-2.5 font-medium text-lg">页面标题</div>

      <!-- 搜索区域 -->
      <Card class="mb-2">
        <Search
          :search-loading="searchLoading"
          :reset-loading="resetLoading"
          :is-inline="true"
          :expand="true"
          @search="handleSearch"
          @reset="handleReset"
        >
          <Form v-model:data="formData" :columns="formColumns" :config="formConfig" />
        </Search>
      </Card>

      <!-- 表格区域 -->
      <Card>
        <Table
          v-model:select-list="selectList"
          :config="tableConfig"
          :data="tableData"
          :loading="tableLoading"
          :columns="tableColumns"
          @change="changePaginationEvent"
        >
          <!-- 表格顶部操作区 -->
          <template #header>
            <div class="flex items-center justify-end space-x-4">
              <a-button type="primary">新增</a-button>
              <a-button>导出</a-button>
            </div>
          </template>

          <!-- 表格操作列 -->
          <template #default="{ row }">
            <a-space size="small">
              <a class="text-primary">编辑</a>
              <a class="text-danger">删除</a>
            </a-space>
          </template>
        </Table>
      </Card>
    </div>
  </Page>
</template>
```

## 最佳实践

1. 在实际开发中，建议将表格和表单配置提取到单独的配置文件中：

```typescript
// config/tableConfig.ts
export const tableColumns = [
  // 列配置
]

export const tableConfig = {
  // 表格配置
}

// config/formConfig.ts
export const formColumns = ref([
  // 表单字段配置
])
```

2. 然后在组件中导入使用：

```typescript
import { formColumns } from './config/editFormConfig'
import { tableColumns, tableConfig } from './config/tableConfig'
```
