---
description: PC-Pro项目 Naive UI使用规范
globs:
alwaysApply: false
---
# PC-Pro项目 Naive UI使用规范

## Naive UI概述
PC-Pro项目使用[Naive UI](mdc:https:/www.naiveui.com/zh-CN/os-theme)作为主要UI组件库。Naive UI是一个基于Vue 3的高性能组件库，拥有完整的TypeScript类型定义。

## 组件引入方式

### 1. 自动引入配置
项目已配置[unplugin-vue-components](mdc:packages/pc-pro/vite.config.ts)实现组件自动引入，无需手动import组件。

### 2. API引入规范
全局API通过unplugin-auto-import自动引入：
```typescript
// 全局UI方法自动引入，可直接使用：
useDialog()
useMessage()
useNotification()
useLoadingBar()
```

## 主题配置

### 1. 主题设置
全局主题配置通过NConfigProvider组件设置：
```vue
<template>
  <n-config-provider :theme="isDark ? darkTheme : null" :theme-overrides="themeOverrides">
    <!-- 应用内容 -->
  </n-config-provider>
</template>

<script setup lang="ts">
const themeOverrides = {
  common: {
    primaryColor: '#2080f0', // 主题色
  },
}
</script>
```

### 2. 暗黑模式
暗黑模式通过切换theme属性实现：
```typescript
import { darkTheme } from 'naive-ui'

// 切换暗黑模式
const isDark = ref(false)

// 在模板中使用
<n-config-provider :theme="isDark.value ? darkTheme : null">
  <!-- 内容 -->
</n-config-provider>
```

## 常用组件使用规范

### 1. 表格组件（NDataTable）
```vue
<template>
  <n-data-table
    :columns="columns"
    :data="data"
    :pagination="pagination"
    :loading="loading"
    @update:page="handlePageChange"
  />
</template>

<script setup lang="ts">
const columns = [
  {
    title: '姓名',
    key: 'name',
    sorter: 'default',
  },
  {
    title: '年龄',
    key: 'age',
  },
  {
    title: '操作',
    key: 'actions',
    render(row) {
      return h('div', [
        h(
          NButton,
          {
            type: 'primary',
            size: 'small',
            onClick: () => handleEdit(row),
          },
          { default: () => '编辑' }
        ),
      ])
    },
  },
]
</script>
```

### 2. 表单组件（NForm）
```vue
<template>
  <n-form
    ref="formRef"
    :model="formValue"
    :rules="rules"
    label-placement="left"
    label-width="80"
    require-mark-placement="right-hanging"
  >
    <n-form-item label="姓名" path="name">
      <n-input v-model:value="formValue.name" placeholder="请输入姓名" />
    </n-form-item>
    <n-form-item label="年龄" path="age">
      <n-input-number v-model:value="formValue.age" placeholder="请输入年龄" />
    </n-form-item>
    <n-form-item>
      <n-button type="primary" @click="handleSubmit">提交</n-button>
    </n-form-item>
  </n-form>
</template>

<script setup lang="ts">
import type { FormInst, FormRules } from 'naive-ui'

const formRef = ref<FormInst | null>(null)
const formValue = ref({
  name: '',
  age: null,
})

const rules: FormRules = {
  name: {
    required: true,
    trigger: ['blur', 'input'],
    message: '请输入姓名',
  },
  age: {
    required: true,
    trigger: ['blur', 'change'],
    message: '请输入年龄',
  },
}

function handleSubmit() {
  formRef.value?.validate((errors) => {
    if (!errors) {
      // 提交表单
    }
  })
}
</script>
```

### 3. 对话框（NModal）
```vue
<template>
  <n-modal
    v-model:show="showModal"
    preset="dialog"
    title="确认操作"
    positive-text="确定"
    negative-text="取消"
    @positive-click="handleConfirm"
    @negative-click="showModal = false"
  >
    确定要执行此操作吗？
  </n-modal>
</template>

<script setup lang="ts">
const showModal = ref(false)

function handleConfirm() {
  // 确认操作
}
</script>
```

## 表格和表单最佳实践

### 1. 表格结合搜索表单
- 将搜索条件、分页、数据加载、刷新等逻辑封装到composable中
- 表格列定义提取到独立的配置文件中

### 2. 表单验证
- 表单验证规则应提取到独立的配置文件中
- 复杂表单应拆分为多个子组件

## 性能优化

### 1. 大数据渲染
- 使用虚拟滚动提高大量数据的渲染性能
```vue
<n-data-table virtual-scroll :max-height="400" :columns="columns" :data="largeData" />
```

### 2. 按需加载
- 复杂组件应延迟加载或条件渲染

## 自定义组件封装

### 1. 二次封装
- 对常用组件进行二次封装，统一样式和行为
- 封装组件要保持与原组件相同的接口设计
