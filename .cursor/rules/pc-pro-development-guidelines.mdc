---
description: PC-Pro项目开发规范
globs:
alwaysApply: false
---
# PC-Pro项目开发规范

## 项目概述
PC-Pro项目是基于Vue 3、TypeScript、Vite、Naive UI和UnoCSS的现代化管理系统框架。此规则文件定义了项目的代码规范和架构规则。

## 项目目录结构
项目的主要入口文件是[packages/pc-pro/src/main.ts](mdc:packages/pc-pro/src/main.ts)，主应用组件是[packages/pc-pro/src/App.vue](mdc:packages/pc-pro/src/App.vue)。

项目结构遵循以下组织方式：
- `src/api`: API接口定义，按功能模块划分
- `src/assets`: 静态资源，包含图标和图片
- `src/components`: 可复用组件
- `src/composables`: 组合式API逻辑封装
- `src/directives`: 自定义指令
- `src/enums`: 枚举定义
- `src/interface`: 接口类型定义
- `src/layouts`: 布局组件
- `src/router`: 路由配置
- `src/store`: 状态管理，基于Pinia
- `src/styles`: 全局样式
- `src/utils`: 工具函数
- `src/views`: 页面组件

## Vue组件开发规范

### 1. 组件实现
- 使用`<script setup lang="ts">`语法
- 使用TypeScript进行类型定义
- 使用UnoCSS进行样式开发
- 示例参考：[packages/pc-pro/src/components/DynamicTooltip.vue](mdc:packages/pc-pro/src/components/DynamicTooltip.vue)

### 2. 组件命名与组织
- 组件文件使用PascalCase命名
- 页面组件放置在`views`目录下
- 基础UI组件放置在`components`目录下
- 布局组件放置在`layouts`目录下

### 3. Props定义
```typescript
const props = defineProps({
  message: {
    type: String,
    default: '',
  },
  required: {
    type: Boolean,
    required: true,
  },
})
```

### 4. 事件定义
```typescript
const emit = defineEmits<{
  (e: 'update:modelValue', value: string): void
  (e: 'change', value: string): void
}>()
```

## 状态管理规范

### 1. Pinia Store
- 使用Pinia进行状态管理
- Store文件放置在`store/modules`目录下
- 使用模块化方式组织Store
- 持久化状态使用`pinia-plugin-persistedstate`

### 2. Store使用方式
```typescript
// 定义Store
export const useUserStore = defineStore('user', () => {
  const user = ref<User | null>(null)

  function setUser(newUser: User) {
    user.value = newUser
  }

  return {
    user,
    setUser,
  }
}, {
  persist: true,
})

// 使用Store
const userStore = useUserStore()
const { user } = storeToRefs(userStore)
```

## 路由规范

### 1. 路由配置
- 路由配置文件：[packages/pc-pro/src/router/routes.ts](mdc:packages/pc-pro/src/router/routes.ts)
- 路由使用模块化配置
- 路由权限控制通过导航守卫实现

### 2. 路由守卫
- 路由守卫配置：[packages/pc-pro/src/router/guards](mdc:packages/pc-pro/src/router/guards)
- 进行登录状态检查、权限验证等操作

## API请求规范

### 1. 接口定义
- API文件按模块组织，放置在`api`目录下
- 每个接口需要定义请求和响应类型

### 2. 接口类型定义
- 接口类型定义放置在`interface`目录下
- 按模块组织类型定义

## 样式规范

### 1. UnoCSS
- 优先使用UnoCSS的原子化CSS类
- 复杂样式可通过组合多个原子类实现

### 2. 自定义样式
- 组件样式优先使用`<style scoped>`
- 全局样式定义在`styles`目录下

## 工具函数规范

### 1. 组合式API
- 可复用的逻辑应封装为Composable函数
- Composable函数放置在`composables`目录下

### 2. 工具函数
- 工具函数应放在`utils`目录下
- 工具函数应该是纯函数

## 代码质量规范

### 1. TypeScript
- 所有代码必须使用TypeScript
- 合理使用类型定义，避免使用`any`
- 优先使用接口（interface）定义类型

### 2. 代码格式化
- 使用ESLint进行代码检查
- 使用Prettier进行代码格式化

## 构建与部署

### 1. Vite配置
- Vite配置文件：[packages/pc-pro/vite.config.ts](mdc:packages/pc-pro/vite.config.ts)
- 使用插件进行功能扩展

### 2. 环境变量
- 环境变量通过`.env`文件配置
- 环境变量必须以`VITE_`开头
