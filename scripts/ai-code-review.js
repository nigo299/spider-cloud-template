const { execSync } = require('node:child_process')
const https = require('node:https')

class GitlabAPI {
  constructor() {
    this.baseURL = process.env.CI_SERVER_URL
    this.token = process.env.GITLAB_TOKEN

    if (!this.baseURL || !this.token) {
      throw new Error(
        'Missing GitLab API configuration. Please set CI_SERVER_URL and GITLAB_TOKEN environment variables.',
      )
    }
  }

  async getMergeRequestChanges(projectId, mrIid) {
    try {
      const cmd = `curl -s -H "PRIVATE-TOKEN: ${this.token}" "${this.baseURL}/api/v4/projects/${projectId}/merge_requests/${mrIid}/changes"`
      const response = execSync(cmd)
      const data = JSON.parse(response.toString())
      return data.changes || []
    } catch (error) {
      console.error('Error fetching MR changes:', error.message)
      throw error
    }
  }

  async createMergeRequestComment(projectId, mrIid, comment) {
    try {
      const cmd = `curl -s -X POST -H "PRIVATE-TOKEN: ${this.token}" -H "Content-Type: application/json" "${this.baseURL}/api/v4/projects/${projectId}/merge_requests/${mrIid}/notes" -d '${JSON.stringify({ body: comment })}'`
      execSync(cmd)
    } catch (error) {
      console.error('Error posting comment:', error.message)
      throw error
    }
  }
}

function formatDiffForReview(changes) {
  return changes
    .map((change) => {
      const oldPath = change.old_path || ''
      const newPath = change.new_path || ''
      const diff = change.diff || ''

      return `File: ${newPath} (previously: ${oldPath})
Changes:
${diff}
${'='.repeat(80)}`
    })
    .join('\n\n')
}

async function getAIReview(diffContent) {
  // DeepSeek API 配置
  const DEEPSEEK_API_URL = 'https://api.deepseek.com/chat/completions'
  const DEEPSEEK_API_KEY = 'sk-51e32eb399bb4bb798cc1ed1e9ec4196' // 这里填写你的 API Key

  const systemPrompt = `你是一位严谨细致的前端代码审查专家，具有以下专业能力：

代码规范检查：
- 严格按照主流前端框架（React、Vue、Angular）的最佳实践进行检查
- 确保代码符合团队内部代码风格指南
- 检查代码格式、命名规范、注释风格等

潜在问题预警：
- 识别代码中的逻辑错误
- 发现性能瓶颈
- 检测安全漏洞
- 提供具体的改进建议

最佳实践推荐：
- 基于前端开发的深入理解提供优化建议
- 推荐更优雅、高效的代码实现方式
- 帮助提升代码质量

可维护性评估：
- 评估代码结构和模块化
- 检查代码可测试性
- 提供重构建议

你的代码审查应该包含以下部分：
1. 问题列表：清晰列出发现的问题，标注具体文件和行号
2. 改进建议：为每个问题提供详细的改进建议，必要时附带示例代码
3. 评分：对代码质量进行1-10分的评分，并给出总体评价`

  const userPrompt = `请审查以下代码变更，重点关注：
1. 代码规范和风格
2. 性能优化机会
3. 潜在的安全问题
4. 可维护性和可测试性
5. 组件设计和状态管理（针对前端框架代码）
6. 错误处理和边界情况
7. TypeScript/JavaScript 类型安全
8. CSS 最佳实践和响应式设计

代码变更内容：
${diffContent}

请按照以下格式提供审查结果：

## 代码审查结果

### 1. 问题列表
[列出所有发现的问题，包含文件名和行号]

### 2. 改进建议
[为每个问题提供具体的改进建议和示例代码]

### 3. 最佳实践建议
[提供一般性的最佳实践建议]

### 4. 性能优化建议
[提供性能相关的优化建议]

### 5. 安全性建议
[提供安全相关的改进建议]

### 6. 代码质量评分
- 代码规范：[1-10分]
- 性能表现：[1-10分]
- 安全性：[1-10分]
- 可维护性：[1-10分]
- 总体评分：[1-10分]

### 7. 总体评价
[对代码质量的整体评价和主要改进方向]`

  const data = {
    model: 'deepseek-chat',
    messages: [
      {
        role: 'system',
        content: systemPrompt,
      },
      {
        role: 'user',
        content: userPrompt,
      },
    ],
    stream: false,
  }

  try {
    // 使用正确的 curl 格式调用 DeepSeek API
    const cmd = `curl -s -H "Content-Type: application/json" -H "Authorization: Bearer ${DEEPSEEK_API_KEY}" "${DEEPSEEK_API_URL}" -d '${JSON.stringify(data)}'`
    const response = execSync(cmd)
    const result = JSON.parse(response.toString())
    return result.choices[0].message.content
  } catch (error) {
    console.error('Error getting AI review:', error.message)
    return `Error getting AI review: ${error.message}`
  }
}

async function main() {
  const { CI_PROJECT_ID, CI_MERGE_REQUEST_IID } = process.env

  // 验证必要的环境变量
  if (!CI_PROJECT_ID || !CI_MERGE_REQUEST_IID) {
    console.error('Missing required environment variables')
    process.exit(1)
  }

  try {
    // 初始化 GitLab API 客户端
    const gitlab = new GitlabAPI()

    // 获取 MR 的变更
    const changes = await gitlab.getMergeRequestChanges(CI_PROJECT_ID, CI_MERGE_REQUEST_IID)

    // 格式化变更内容
    const diffContent = formatDiffForReview(changes)

    // 获取 AI 审查结果
    const reviewResult = await getAIReview(diffContent)

    // 构造评论内容
    const comment = `## AI Code Review Results

${reviewResult}

---
*This review was automatically generated by DeepSeek AI*`

    // 发布评论
    await gitlab.createMergeRequestComment(CI_PROJECT_ID, CI_MERGE_REQUEST_IID, comment)

    console.log('AI code review completed successfully')
  } catch (error) {
    console.error('Error in AI code review:', error.message)
    process.exit(1)
  }
}

main()
